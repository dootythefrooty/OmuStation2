// SPDX-FileCopyrightText: 2024 Leon Friedrich <60421075+ElectroJr@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 ShadowCommander <10494922+ShadowCommander@users.noreply.github.com>
// SPDX-FileCopyrightText: 2024 metalgearsloth <31366439+metalgearsloth@users.noreply.github.com>
// SPDX-FileCopyrightText: 2025 Aiden <28298836+Aidenkrz@users.noreply.github.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

using Content.Shared.Traits;
using Content.Client.Players.PlayTimeTracking;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Utility;
using Robust.Shared.Configuration;
using Content.Shared.CCVar;

namespace Content.Client._Omu.Lobby.Ui.Roles;

/// <summary>
/// A selector used to select traits.
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class TraitRequirementsSelector : BoxContainer
{

    public event Action<bool>? PreferenceChanged;

    public bool Preference
    {
        get => ToggleableButton.Pressed;
        set => ToggleableButton.Pressed = value;
    }

    private readonly IConfigurationManager _cfg;

    // Whether the selector should be locked. Used to prevent disabling the button while an invalid trait is selected (to allow it to be deselected)
    private bool _locked;

    public TraitRequirementsSelector(IConfigurationManager configManager)
    {
        RobustXamlLoader.Load(this);

        _cfg = configManager;

        ToggleableButton.OnToggled += OnButtonToggled;
    }

    /// <summary>
    /// Actually adds the controls.
    /// </summary>
    public void Setup(TraitPrototype trait, FormattedMessage? requirementsMessage)
    {
        TraitsTitle.Text = Loc.GetString(trait.Name);

        var showGlobalPoints = _cfg.GetCVar(CCVars.TraitsGlobalPointsEnabled);
        if (showGlobalPoints)
            GlobalPointsCount.Text = trait.GlobalCost.ToString();

        if (trait.Cost != 0)
        {
            PointsCount.Text = trait.Cost.ToString();
            PointsCount.Visible = true;
        }
        else if (!showGlobalPoints) // if neither category- nor global- points exist, we can remove this margin.
        {
            TraitsTitle.Margin = new Thickness(0, 0, 0, 0);
        }

        var tooltip = new Tooltip();
        var tooltipMessage = new FormattedMessage();

        if (trait.Description != null)
        {
            tooltipMessage = FormattedMessage.FromUnformatted(Loc.GetString(trait.Description));
        }

        if (requirementsMessage != null)
        {
            tooltipMessage.PushNewline();
            tooltipMessage.PushNewline();
            tooltipMessage.AddMessage(requirementsMessage);
        }

        tooltip.SetMessage(tooltipMessage);

        ToggleableButton.TooltipSupplier = _ => tooltip;
    }

    public void LockRequirements()
    {
        if (!Preference)
            ToggleableButton.Disabled = true;

        _locked = true;
    }

    public void UnlockRequirements()
    {
        ToggleableButton.Disabled = false;
        _locked = false;
    }

    private void OnButtonToggled(BaseButton.ButtonToggledEventArgs args)
    {
        PreferenceChanged?.Invoke(Preference);

        if (!Preference && _locked)
            LockRequirements();
    }

}